{"ast":null,"code":"var A = (t => (t.BAR = \"BAR\", t.SECTION = \"SECTION\", t))(A || {}),\n  N = (i => (i.ACTIVATE = \"activate\", i.MOVE = \"move\", i.DEACTIVATE = \"deactivate\", i))(N || {});\nfunction S() {\n  let n = [],\n    e = 0,\n    t = 0;\n  return {\n    collect(i) {\n      n.push(i), i.disableResponsive || (e += 1, t += i.currentSize);\n    },\n    getResult() {\n      return {\n        sizeInfoArray: n,\n        flexGrowRatio: e / t\n      };\n    }\n  };\n}\nfunction a(n) {\n  return Number.isFinite(n) && n > 0;\n}\nfunction g(n, e, t) {\n  let {\n      collect: i,\n      getResult: r\n    } = S(),\n    s = I(n, e, -1, t),\n    c = I(n, -e, 1, t),\n    l = e - s.remainingOffset,\n    o = -e - c.remainingOffset;\n  function m(d, H) {\n    d.forEach(i), i(t[n]), H.forEach(i);\n  }\n  if (l === -o) m(s.sizeInfoArray, c.sizeInfoArray);else if (Math.abs(l) < Math.abs(o)) {\n    let d = I(n, -l, 1, t);\n    m(s.sizeInfoArray, d.sizeInfoArray);\n  } else {\n    let d = I(n, -o, -1, t);\n    m(d.sizeInfoArray, c.sizeInfoArray);\n  }\n  return r();\n}\nfunction I(n, e, t, i) {\n  let r = [],\n    s = e;\n  for (let o = n + t; l(o); o += t) if (s) {\n    let {\n      sizeInfo: m,\n      remainingOffset: d\n    } = K(s, i[o]);\n    s = d, c(m);\n  } else c(i[o]);\n  function c(o) {\n    t === -1 ? r.unshift(o) : r.push(o);\n  }\n  function l(o) {\n    return t === -1 ? o >= 0 : o <= i.length - 1;\n  }\n  return {\n    sizeInfoArray: r,\n    remainingOffset: s\n  };\n}\nfunction K(n, e) {\n  if (e.isSolid) return {\n    remainingOffset: n,\n    sizeInfo: e\n  };\n  let {\n    nextSize: t,\n    remainingOffset: i\n  } = _(e.currentSize + n, e);\n  return {\n    sizeInfo: {\n      ...e,\n      currentSize: t\n    },\n    remainingOffset: i\n  };\n}\nfunction _(n, {\n  maxSize: e,\n  minSize: t = 0\n}) {\n  return n < t ? {\n    nextSize: t,\n    remainingOffset: n - t\n  } : a(e) && n > e ? {\n    nextSize: e,\n    remainingOffset: n - e\n  } : {\n    nextSize: n,\n    remainingOffset: 0\n  };\n}\nvar y = {\n  x: 0,\n  y: 0\n};\nfunction O(n, e) {\n  return e ? {\n    x: n.x - e.x,\n    y: n.y - e.y\n  } : y;\n}\nvar x = {\n  barIndex: -1,\n  offset: 0,\n  type: \"deactivate\",\n  originalCoordinate: y,\n  defaultSizeInfoArray: [],\n  sizeInfoArray: [],\n  discard: !0,\n  flexGrowRatio: 0\n};\nfunction L(n) {\n  let e = x,\n    t = new Set();\n  return {\n    dispatch(i) {\n      e = (() => {\n        let r = {\n          barIndex: i.barIndex,\n          type: i.type\n        };\n        switch (i.type) {\n          case \"activate\":\n            let {\n              sizeInfoArray: s,\n              flexGrowRatio: c\n            } = n.getSizeRelatedInfo();\n            return {\n              ...x,\n              ...r,\n              originalCoordinate: i.coordinate,\n              defaultSizeInfoArray: s,\n              sizeInfoArray: s,\n              flexGrowRatio: c\n            };\n          case \"move\":\n            let l = n.calculateOffset(i.coordinate, e.originalCoordinate);\n            return {\n              ...r,\n              ...g(i.barIndex, l, e.defaultSizeInfoArray),\n              offset: l,\n              originalCoordinate: e.originalCoordinate,\n              defaultSizeInfoArray: e.defaultSizeInfoArray,\n              discard: !1\n            };\n          case \"deactivate\":\n            return x;\n        }\n      })(), t.forEach(r => r(e));\n    },\n    subscribe(i) {\n      return t.add(i), () => t.delete(i);\n    },\n    unsubscribeAll() {\n      t.clear();\n    }\n  };\n}\nfunction u(n, e, t) {\n  n?.dispatchEvent(new CustomEvent(e, {\n    detail: t\n  }));\n}\nvar C = class {\n  disposeFnSet = new Set();\n  watchResizerEvent = (e, t, i) => {\n    e?.addEventListener(t, i);\n    let r = () => e?.removeEventListener(t, i);\n    return this.disposeFnSet.add(r), r;\n  };\n  reset = () => {\n    this.disposeFnSet.forEach(e => e()), this.disposeFnSet.clear();\n  };\n};\nvar b = class {\n  infoMap = new Map();\n  items = [];\n  update(e) {\n    this.infoMap.clear(), this.items.forEach(t => t.destroy()), this.items = e, e.forEach((t, i) => {\n      this.infoMap.set(t.elm, {\n        item: t,\n        index: i\n      });\n    });\n  }\n  reset() {\n    this.update([]);\n  }\n  getItems() {\n    return this.items;\n  }\n  getItem(e) {\n    return this.infoMap.get(e)?.item ?? null;\n  }\n  getItemIndex(e) {\n    return this.infoMap.get(e)?.index ?? null;\n  }\n};\nvar R = !0;\ntry {\n  window.addEventListener(\"test\", null, {\n    get passive() {\n      return R = {\n        passive: !1\n      }, !0;\n    }\n  });\n} catch {}\nfunction v({\n  size: n\n}) {\n  return a(n);\n}\nfunction w(n) {\n  let {\n    disableResponsive: e\n  } = n;\n  return v(n) && e === void 0 ? !0 : !!e;\n}\nfunction M(n) {\n  return !!n && n in A;\n}\nfunction T(n) {\n  return e => ({\n    \"data-item-type\": n,\n    \"data-item-config\": JSON.stringify(e)\n  });\n}\nfunction V(n) {\n  return Array.from(n.childNodes).map(e => {\n    if (!(e instanceof HTMLElement)) return null;\n    let t = e.getAttribute(\"data-item-type\");\n    return M(t) ? {\n      type: t,\n      elm: e\n    } : null;\n  }).filter(e => !!e);\n}\nfunction E({\n  elm: n\n}) {\n  try {\n    let e = JSON.parse(n.getAttribute(\"data-item-config\") ?? \"\");\n    return e && typeof e == \"object\" ? e : {};\n  } catch {\n    return {};\n  }\n}\nfunction D(n) {\n  return n * 2 + 1;\n}\nfunction B(n) {\n  return n * 2;\n}\nvar z = class {\n  constructor(e) {\n    this.resizeResult = e;\n  }\n  isDiscarded = !1;\n  resizeSection(e, t) {\n    if (this.isDiscarded) return;\n    let i = B(e),\n      r = this.getSize(i);\n    if (r >= 0 && t.toSize >= 0) {\n      let s = t.toSize - r;\n      i === this.resizeResult.sizeInfoArray.length - 1 || t.preferMoveLeftBar ? this.moveBar(e - 1, {\n        withOffset: -s\n      }) : this.moveBar(e, {\n        withOffset: s\n      });\n    }\n  }\n  moveBar(e, t) {\n    this.isDiscarded || (this.resizeResult = g(D(e), t.withOffset, this.resizeResult.sizeInfoArray));\n  }\n  discard() {\n    this.isDiscarded = !0;\n  }\n  isSectionResized(e) {\n    let t = B(e);\n    return \"defaultSizeInfoArray\" in this.resizeResult ? this.getSize(t) !== this.resizeResult.defaultSizeInfoArray[t].currentSize : !1;\n  }\n  isBarActivated(e) {\n    return \"barIndex\" in this.resizeResult ? this.resizeResult.barIndex === D(e) : !1;\n  }\n  getSectionSize(e) {\n    return this.getSize(B(e));\n  }\n  getResult() {\n    return {\n      ...this.resizeResult,\n      discard: this.isDiscarded\n    };\n  }\n  getTotalSize() {\n    return this.resizeResult.sizeInfoArray.filter((e, t) => e && t % 2 === 0).reduce((e, {\n      currentSize: t\n    }) => e + t, 0);\n  }\n  getSize(e) {\n    let t = this.resizeResult.sizeInfoArray[e];\n    return t ? t.currentSize : -1;\n  }\n};\nvar h = class {\n  constructor(e, t, i) {\n    this.type = e;\n    this.elm = t;\n    this.getConfig = i;\n    this._config = this.getConfig(), this._observer = new MutationObserver(() => this._config = this.getConfig()), this._observer.observe(t, {\n      attributes: !0,\n      attributeFilter: [\"data-item-config\"]\n    });\n  }\n  _config;\n  _observer;\n  get config() {\n    return this._config;\n  }\n  destroy() {\n    this._observer.disconnect();\n  }\n};\nvar p = class extends h {\n  constructor(t, i) {\n    super(\"BAR\", t.elm, () => F(t));\n    this.dispatchBarAction = i;\n    let r = [this.attachListener(this.elm, \"mousedown\", \"activate\"), this.attachListener(document, \"mousemove\", \"move\"), this.attachListener(document, \"mouseup\", \"deactivate\"), this.attachListener(this.elm, \"touchstart\", \"activate\", R), this.attachListener(document, \"touchmove\", \"move\", R), this.attachListener(document, \"touchend\", \"deactivate\"), this.attachListener(document, \"touchcancel\", \"deactivate\")];\n    this.destroy = () => {\n      super.destroy(), r.forEach(s => s());\n    };\n  }\n  static getStyle({\n    size: t\n  }) {\n    return {\n      flex: `0 0 ${t}px`\n    };\n  }\n  isActive = !1;\n  isValidClick = !0;\n  attachListener(t, i, r, s) {\n    let c = l => {\n      this.disableUserSelectIfResizing(l, r);\n      let {\n        clientX: o,\n        clientY: m\n      } = (\"touches\" in l ? l.touches[0] : l) || {\n        clientX: 0,\n        clientY: 0\n      };\n      this.triggerAction(this.elm, r, {\n        x: o,\n        y: m\n      });\n    };\n    return t.addEventListener(i, c, s), () => t.removeEventListener(i, c, s);\n  }\n  disableUserSelectIfResizing(t, i) {\n    (this.isActive || i === \"activate\") && t.preventDefault();\n  }\n  triggerAction(t, i, r) {\n    (this.isActive || i === \"activate\") && this.dispatchBarAction(t, {\n      type: i,\n      coordinate: r\n    }), this.isActive && this.isValidClick && i === \"deactivate\" && (this.isValidClick = !1, u(t, \"bar:click\", null)), this.updateStatusIfNeed(t, i), this.updateClickStatus(i);\n  }\n  updateStatusIfNeed(t, i) {\n    let r = s => {\n      this.isActive !== s && (this.isActive = s, u(t, \"bar:status-change\", {\n        isActive: s\n      }));\n    };\n    i === \"activate\" ? r(!0) : i === \"deactivate\" && r(!1);\n  }\n  updateClickStatus(t) {\n    this.isActive && (t === \"activate\" ? this.isValidClick = !0 : t === \"move\" && (this.isValidClick = !1));\n  }\n};\nfunction F(n) {\n  let {\n    size: e\n  } = E(n);\n  return {\n    size: a(e) ? e : 10\n  };\n}\nvar f = class extends h {\n  static getStyle({\n    maxSize: e,\n    minSize: t\n  }, i) {\n    let r = s => a(s) ? `${s}px` : void 0;\n    return {\n      overflow: \"hidden\",\n      [i ? \"maxHeight\" : \"maxWidth\"]: r(e),\n      [i ? \"minHeight\" : \"minWidth\"]: r(t)\n    };\n  }\n  sizeInfo = null;\n  flexGrowRatio = 0;\n  constructor(e) {\n    super(\"SECTION\", e.elm, () => G(e)), this.updateStyle();\n  }\n  update({\n    sizeInfo: e,\n    flexGrowRatio: t\n  }) {\n    this.sizeInfo = e, this.flexGrowRatio = t, this.updateStyle(), u(this.elm, \"section:size-change\", {\n      size: e.currentSize\n    });\n  }\n  updateStyle() {\n    let {\n      flexGrow: e,\n      flexShrink: t,\n      flexBasis: i\n    } = this.getStyle();\n    this.elm.style.flexGrow = `${e}`, this.elm.style.flexShrink = `${t}`, this.elm.style.flexBasis = `${i}px`;\n  }\n  getStyle() {\n    let e = a(this.config.size) ? 0 : this.config.disableResponsive ? 1 : 0;\n    if (this.sizeInfo) {\n      let {\n        disableResponsive: t,\n        currentSize: i\n      } = this.sizeInfo;\n      return {\n        flexShrink: e,\n        flexGrow: t ? 0 : this.flexGrowRatio * i,\n        flexBasis: t ? i : 0\n      };\n    } else {\n      let t = this.config.size || this.config.defaultSize;\n      return a(t) ? {\n        flexShrink: e,\n        flexGrow: 0,\n        flexBasis: t\n      } : {\n        flexShrink: e,\n        flexGrow: 1,\n        flexBasis: 0\n      };\n    }\n  }\n};\nfunction G(n) {\n  let {\n    size: e,\n    defaultSize: t,\n    maxSize: i,\n    minSize: r,\n    disableResponsive: s\n  } = E(n);\n  return {\n    size: a(e) ? e : void 0,\n    defaultSize: a(t) ? t : void 0,\n    maxSize: a(i) ? i : void 0,\n    minSize: a(r) ? r : void 0,\n    disableResponsive: !!s\n  };\n}\nvar k = class {\n  constructor(e) {\n    this.config = e;\n    this.barStore = L({\n      calculateOffset: (t, i) => O(t, i)[this.axis],\n      getSizeRelatedInfo: () => this.makeSizeInfos()\n    });\n  }\n  styles = {\n    container: e => ({\n      ...e,\n      display: \"flex\",\n      flexDirection: this.direction\n    }),\n    section: (e, t) => ({\n      ...t,\n      ...f.getStyle(e, this.config.vertical)\n    }),\n    bar: (e, t) => ({\n      ...t,\n      ...p.getStyle(e)\n    })\n  };\n  attributes = {\n    bar: T(\"BAR\"),\n    section: T(\"SECTION\")\n  };\n  itemsCache = new b();\n  eventHub = new C();\n  container = null;\n  barStore;\n  get axis() {\n    return this.config.vertical ? \"y\" : \"x\";\n  }\n  get dimension() {\n    return this.config.vertical ? \"height\" : \"width\";\n  }\n  get direction() {\n    return this.config.vertical ? \"column\" : \"row\";\n  }\n  get on() {\n    return this.eventHub.watchResizerEvent;\n  }\n  init(e) {\n    this.dispose(), this.container = e, e && (this.itemsCache.update(V(e).map(t => {\n      switch (t.type) {\n        case \"BAR\":\n          return new p(t, this.dispatchBarAction);\n        case \"SECTION\":\n          return new f(t);\n      }\n    })), this.initStyles(e, this.itemsCache.getItems()), this.sizeRelatedInfoChange(this.makeSizeInfos()), this.barStore.subscribe(t => {\n      this.monitorBarStatusChanges(t), this.sizeRelatedInfoChange(t);\n    }));\n  }\n  dispose() {\n    this.container = null, this.itemsCache.reset(), this.barStore.unsubscribeAll(), this.eventHub.reset();\n  }\n  getResizer() {\n    return new z(this.makeSizeInfos());\n  }\n  applyResizer(e) {\n    this.sizeRelatedInfoChange(e.getResult());\n  }\n  dispatchBarAction = (e, t) => {\n    let i = this.itemsCache.getItemIndex(e);\n    i && this.barStore.dispatch({\n      ...t,\n      barIndex: i\n    });\n  };\n  sizeRelatedInfoChange(e) {\n    e.discard || (e = (() => {\n      if (typeof this.config.beforeApplyResizer == \"function\") {\n        let t = new z(e);\n        return this.config.beforeApplyResizer(t), t.getResult();\n      } else return e;\n    })(), !e.discard && e.sizeInfoArray.forEach(t => {\n      let i = this.itemsCache.getItem(t.elm);\n      i instanceof f && i.update({\n        sizeInfo: t,\n        flexGrowRatio: e.flexGrowRatio\n      });\n    }));\n  }\n  monitorBarStatusChanges({\n    type: e\n  }) {\n    switch (e) {\n      case \"activate\":\n        return u(this.container, \"column:activate\", null);\n      case \"deactivate\":\n        return u(this.container, \"column:after-resizing\", null);\n      default:\n        return;\n    }\n  }\n  makeSizeInfos() {\n    let {\n      collect: e,\n      getResult: t\n    } = S();\n    return this.itemsCache.getItems().forEach(i => {\n      i instanceof p && e({\n        elm: i.elm,\n        disableResponsive: !0,\n        isSolid: !0,\n        currentSize: i.elm.getBoundingClientRect()[this.dimension]\n      }), i instanceof f && e({\n        elm: i.elm,\n        maxSize: i.config.maxSize,\n        minSize: i.config.minSize,\n        disableResponsive: w(i.config),\n        isSolid: v(i.config),\n        currentSize: i.elm.getBoundingClientRect()[this.dimension]\n      });\n    }), t();\n  }\n  initStyles(e, t) {\n    Object.assign(e.style, this.styles.container()), t.forEach(i => {\n      i instanceof p && Object.assign(i.elm.style, this.styles.bar(i.config)), i instanceof f && Object.assign(i.elm.style, this.styles.section(i.config));\n    });\n  }\n};\nexport { N as BarActionType, k as ColumnResizer, A as ItemType, z as Resizer };","map":{"version":3,"names":["A","t","BAR","SECTION","N","i","ACTIVATE","MOVE","DEACTIVATE","S","n","e","collect","push","disableResponsive","currentSize","getResult","sizeInfoArray","flexGrowRatio","a","Number","isFinite","g","r","s","I","c","l","remainingOffset","o","m","d","H","forEach","Math","abs","sizeInfo","K","unshift","length","isSolid","nextSize","_","maxSize","minSize","y","x","O","barIndex","offset","type","originalCoordinate","defaultSizeInfoArray","discard","L","Set","dispatch","getSizeRelatedInfo","coordinate","calculateOffset","subscribe","add","delete","unsubscribeAll","clear","u","dispatchEvent","CustomEvent","detail","C","disposeFnSet","watchResizerEvent","addEventListener","disposeFn","removeEventListener","reset","b","infoMap","Map","items","update","destroy","set","elm","item","index","getItems","getItem","get","getItemIndex","R","window","passive","v","size","w","M","T","JSON","stringify","V","Array","from","childNodes","map","HTMLElement","getAttribute","filter","E","parse","D","B","z","constructor","resizeResult","isDiscarded","resizeSection","getSize","toSize","preferMoveLeftBar","moveBar","withOffset","isSectionResized","isBarActivated","getSectionSize","getTotalSize","reduce","h","getConfig","_config","_observer","MutationObserver","observe","attributes","attributeFilter","config","disconnect","p","F","dispatchBarAction","attachListener","document","getStyle","flex","isActive","isValidClick","disableUserSelectIfResizing","clientX","clientY","touches","triggerAction","preventDefault","updateStatusIfNeed","updateClickStatus","f","overflow","G","updateStyle","flexGrow","flexShrink","flexBasis","style","defaultSize","k","barStore","axis","makeSizeInfos","styles","container","display","flexDirection","direction","section","vertical","bar","itemsCache","eventHub","dimension","on","init","dispose","initStyles","sizeRelatedInfoChange","monitorBarStatusChanges","getResizer","applyResizer","beforeApplyResizer","getBoundingClientRect","Object","assign","BarActionType","ColumnResizer","ItemType","Resizer"],"sources":["/home/tung/lab/power-note/node_modules/@column-resizer/core/src/types.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/collect-size-related-info.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/is-valid-number.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/get-next-size-related-info.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/calculate-coordinate-offset.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/bar-store.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/column-events.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/column-items-cache.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/disable-passive.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/is-solid-item.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/is-disabled-responsive.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/is-valid-type.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/utils/parse-resizer-items.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/resizer.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/column-items/column-instance.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/column-items/column-bar.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/column-items/column-section.ts","/home/tung/lab/power-note/node_modules/@column-resizer/core/src/column-resizer.ts"],"sourcesContent":["export type Coordinate = {\n  x: number;\n  y: number;\n};\n\nexport enum ItemType {\n  BAR = 'BAR',\n  SECTION = 'SECTION',\n}\n\nexport type Trend = -1 | 0 | 1;\n\nexport enum BarActionType {\n  ACTIVATE = 'activate',\n  MOVE = 'move',\n  DEACTIVATE = 'deactivate',\n}\n\nexport type BarAction = {\n  type: BarActionType;\n  coordinate: Coordinate;\n  barIndex: number;\n};\n\nexport type SizeInfo = {\n  elm: HTMLElement;\n  isSolid: boolean;\n  currentSize: number;\n  maxSize?: number;\n  minSize?: number;\n  disableResponsive?: boolean;\n};\n\nexport type SizeRelatedInfo = {\n  discard?: boolean;\n  sizeInfoArray: SizeInfo[];\n  flexGrowRatio: number;\n};\n\nexport type ColumnResizerEventMap = {\n  'bar:click': null;\n  'bar:status-change': { isActive: boolean };\n  'section:size-change': { size: number };\n  'column:activate': null;\n  'column:after-resizing': null;\n};\n","import { SizeInfo, SizeRelatedInfo } from '../types';\n\nexport function collectSizeRelatedInfo() {\n  const sizeInfoArray: SizeInfo[] = [];\n  let responsiveChildCount = 0;\n  let responsiveContainerSize = 0;\n\n  return {\n    collect(sizeInfo: SizeInfo) {\n      sizeInfoArray.push(sizeInfo);\n\n      if (!sizeInfo.disableResponsive) {\n        responsiveChildCount += 1;\n        responsiveContainerSize += sizeInfo.currentSize;\n      }\n    },\n\n    getResult(): SizeRelatedInfo {\n      return {\n        sizeInfoArray,\n        flexGrowRatio: responsiveChildCount / responsiveContainerSize,\n      };\n    },\n  };\n}\n","export function isValidNumber(num?: unknown): num is number {\n  return Number.isFinite(num) && (num as number) > 0;\n}\n","import { SizeInfo, SizeRelatedInfo, Trend } from '../types';\n\nimport { collectSizeRelatedInfo } from './collect-size-related-info';\nimport { isValidNumber } from './is-valid-number';\n\nexport function getNextSizeRelatedInfo(\n  barIndex: number,\n  offset: number,\n  sizeInfoArray: SizeInfo[],\n): SizeRelatedInfo {\n  const { collect, getResult } = collectSizeRelatedInfo();\n\n  const leftResult = resize(barIndex, offset, -1, sizeInfoArray);\n  const rightResult = resize(barIndex, -offset, 1, sizeInfoArray);\n\n  const leftUsedOffset = offset - leftResult.remainingOffset;\n  const rightUsedOffset = -offset - rightResult.remainingOffset;\n\n  function collectAll(left: SizeInfo[], right: SizeInfo[]) {\n    left.forEach(collect);\n    collect(sizeInfoArray[barIndex]);\n    right.forEach(collect);\n  }\n\n  if (leftUsedOffset === -rightUsedOffset) {\n    collectAll(leftResult.sizeInfoArray, rightResult.sizeInfoArray);\n  } else if (Math.abs(leftUsedOffset) < Math.abs(rightUsedOffset)) {\n    // left side sections was limited\n    const newRightResult = resize(barIndex, -leftUsedOffset, 1, sizeInfoArray);\n    collectAll(leftResult.sizeInfoArray, newRightResult.sizeInfoArray);\n  } else {\n    // right side sections was limited\n    const newLeftResult = resize(barIndex, -rightUsedOffset, -1, sizeInfoArray);\n    collectAll(newLeftResult.sizeInfoArray, rightResult.sizeInfoArray);\n  }\n\n  return getResult();\n}\n\nfunction resize(\n  barIndex: number,\n  offset: number,\n  trend: Trend,\n  sizeInfoArray: SizeInfo[],\n): { sizeInfoArray: SizeInfo[]; remainingOffset: number } {\n  const newSizeInfoArray: SizeInfo[] = [];\n  let prevRemainingOffset = offset;\n\n  for (\n    let sectionIndex = barIndex + trend;\n    isValidSectionIndex(sectionIndex);\n    sectionIndex += trend\n  ) {\n    if (prevRemainingOffset) {\n      const { sizeInfo, remainingOffset } = doResize(\n        prevRemainingOffset,\n        sizeInfoArray[sectionIndex],\n      );\n\n      prevRemainingOffset = remainingOffset;\n      collect(sizeInfo);\n    } else {\n      collect(sizeInfoArray[sectionIndex]);\n    }\n  }\n\n  function collect(sizeInfo: SizeInfo) {\n    if (trend === -1) {\n      newSizeInfoArray.unshift(sizeInfo);\n    } else {\n      newSizeInfoArray.push(sizeInfo);\n    }\n  }\n\n  function isValidSectionIndex(sectionID: number): boolean {\n    if (trend === -1) {\n      return sectionID >= 0;\n    } else {\n      return sectionID <= sizeInfoArray.length - 1;\n    }\n  }\n\n  return {\n    sizeInfoArray: newSizeInfoArray,\n    remainingOffset: prevRemainingOffset,\n  };\n}\n\nfunction doResize(\n  offset: number,\n  sizeInfo: SizeInfo,\n): { remainingOffset: number; sizeInfo: SizeInfo } {\n  if (sizeInfo.isSolid) {\n    return {\n      remainingOffset: offset,\n      sizeInfo,\n    };\n  }\n\n  const { nextSize, remainingOffset } = filterSize(sizeInfo.currentSize + offset, sizeInfo);\n\n  return {\n    sizeInfo: { ...sizeInfo, currentSize: nextSize },\n    remainingOffset,\n  };\n}\n\nfunction filterSize(\n  nextSize: number,\n  { maxSize, minSize = 0 }: SizeInfo,\n): { nextSize: number; remainingOffset: number } {\n  if (nextSize < minSize) {\n    return {\n      nextSize: minSize,\n      remainingOffset: nextSize - minSize,\n    };\n  }\n\n  if (isValidNumber(maxSize) && nextSize > maxSize) {\n    return {\n      nextSize: maxSize,\n      remainingOffset: nextSize - maxSize,\n    };\n  }\n\n  return {\n    nextSize,\n    remainingOffset: 0,\n  };\n}\n","import { Coordinate } from '../types';\n\nexport const DEFAULT_COORDINATE_OFFSET: Coordinate = { x: 0, y: 0 };\n\nexport function calculateCoordinateOffset(\n  current: Coordinate,\n  previous: Coordinate | null,\n): Coordinate {\n  if (previous) {\n    return {\n      x: current.x - previous.x,\n      y: current.y - previous.y,\n    };\n  } else {\n    return DEFAULT_COORDINATE_OFFSET;\n  }\n}\n","import { BarAction, BarActionType, Coordinate, SizeInfo, SizeRelatedInfo } from '../types';\n\nimport { getNextSizeRelatedInfo } from './get-next-size-related-info';\nimport { DEFAULT_COORDINATE_OFFSET } from './calculate-coordinate-offset';\n\nexport interface BarActionScanResult extends SizeRelatedInfo {\n  barIndex: number;\n  offset: number;\n  type: BarActionType;\n  originalCoordinate: Coordinate;\n  defaultSizeInfoArray: SizeInfo[];\n}\n\ninterface ScanBarActionConfig {\n  getSizeRelatedInfo: () => SizeRelatedInfo;\n  calculateOffset: (current: Coordinate, original: Coordinate) => number;\n}\n\nconst DEFAULT_BAR_ACTION_SCAN_RESULT: BarActionScanResult = {\n  barIndex: -1,\n  offset: 0,\n  type: BarActionType.DEACTIVATE,\n  originalCoordinate: DEFAULT_COORDINATE_OFFSET,\n  defaultSizeInfoArray: [],\n  sizeInfoArray: [],\n  discard: true,\n  flexGrowRatio: 0,\n};\n\ntype Callback = (state: BarActionScanResult) => void;\n\nexport function createBarStore(config: ScanBarActionConfig) {\n  let currentState = DEFAULT_BAR_ACTION_SCAN_RESULT;\n  const callbackSet = new Set<Callback>();\n\n  return {\n    dispatch(action: BarAction) {\n      currentState = (() => {\n        const result = {\n          barIndex: action.barIndex,\n          type: action.type,\n        };\n\n        switch (action.type) {\n          case BarActionType.ACTIVATE:\n            const { sizeInfoArray, flexGrowRatio } = config.getSizeRelatedInfo();\n\n            return {\n              ...DEFAULT_BAR_ACTION_SCAN_RESULT,\n              ...result,\n              originalCoordinate: action.coordinate,\n              defaultSizeInfoArray: sizeInfoArray,\n              sizeInfoArray,\n              flexGrowRatio,\n            };\n          case BarActionType.MOVE:\n            const offset = config.calculateOffset(\n              action.coordinate,\n              currentState.originalCoordinate,\n            );\n\n            return {\n              ...result,\n              ...getNextSizeRelatedInfo(action.barIndex, offset, currentState.defaultSizeInfoArray),\n              offset,\n              originalCoordinate: currentState.originalCoordinate,\n              defaultSizeInfoArray: currentState.defaultSizeInfoArray,\n              discard: false,\n            };\n          case BarActionType.DEACTIVATE:\n            return DEFAULT_BAR_ACTION_SCAN_RESULT;\n        }\n      })();\n\n      callbackSet.forEach((callback) => callback(currentState));\n    },\n\n    subscribe(callback: Callback) {\n      callbackSet.add(callback);\n\n      return () => callbackSet.delete(callback);\n    },\n\n    unsubscribeAll() {\n      callbackSet.clear();\n    },\n  };\n}\n","import { ColumnResizerEventMap } from '../types';\n\ntype DisposeFn = () => void;\n\nexport function dispatchResizerEvent<E extends Element, K extends keyof ColumnResizerEventMap>(\n  elm: E | null,\n  key: K,\n  detail: ColumnResizerEventMap[K],\n) {\n  elm?.dispatchEvent(new CustomEvent(key, { detail }));\n}\n\nexport class ResizerEventHub {\n  private disposeFnSet = new Set<DisposeFn>();\n\n  watchResizerEvent = <E extends Element, K extends keyof ColumnResizerEventMap>(\n    elm: E | null,\n    key: K,\n    callback: (event: CustomEvent<ColumnResizerEventMap[K]>) => void,\n  ): DisposeFn => {\n    elm?.addEventListener(key, callback as EventListener);\n\n    const disposeFn = () => elm?.removeEventListener(key, callback as EventListener);\n\n    this.disposeFnSet.add(disposeFn);\n\n    return disposeFn;\n  };\n\n  reset = () => {\n    this.disposeFnSet.forEach((dispose) => dispose());\n    this.disposeFnSet.clear();\n  };\n}\n","import type { ColumnInstance } from '../column-items/column-instance';\n\nexport type ResizerItems = ReadonlyArray<ColumnInstance>;\n\nexport class ColumnItemsCache {\n  private infoMap = new Map<ColumnInstance['elm'], { item: ColumnInstance; index: number }>();\n  private items: ResizerItems = [];\n\n  update(items: ResizerItems) {\n    this.infoMap.clear();\n    this.items.forEach((item) => item.destroy());\n    this.items = items;\n\n    items.forEach((item, index) => {\n      this.infoMap.set(item.elm, { item, index });\n    });\n  }\n\n  reset() {\n    this.update([]);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  getItem(elm: ColumnInstance['elm']): ColumnInstance | null {\n    return this.infoMap.get(elm)?.item ?? null;\n  }\n\n  getItemIndex(elm: ColumnInstance['elm']): number | null {\n    return this.infoMap.get(elm)?.index ?? null;\n  }\n}\n","export let DISABLE_PASSIVE: boolean | AddEventListenerOptions = true;\n\ntry {\n  // @ts-expect-error https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#safely_detecting_option_support\n  window.addEventListener('test', null, {\n    get passive() {\n      DISABLE_PASSIVE = { passive: false };\n      return true;\n    },\n  });\n} catch {}\n","import { ColumnSectionConfig } from '../column-items';\n\nimport { isValidNumber } from './is-valid-number';\n\nexport function isSolidItem({ size }: ColumnSectionConfig): boolean {\n  return isValidNumber(size);\n}\n","import { ColumnSectionConfig } from '../column-items';\n\nimport { isSolidItem } from './is-solid-item';\n\nexport function isDisabledResponsive(config: ColumnSectionConfig): boolean {\n  const { disableResponsive } = config;\n\n  if (isSolidItem(config) && disableResponsive === undefined) {\n    return true;\n  } else {\n    return !!disableResponsive;\n  }\n}\n","import { ItemType } from '../types';\n\nexport function isValidType(type: string | null): type is ItemType {\n  return !!type && type in ItemType;\n}\n","import { ItemType } from '../types';\n\nimport { isValidType } from './is-valid-type';\n\nexport type ParsedResizerItem = {\n  type: ItemType;\n  elm: HTMLElement;\n};\n\nexport type ParsedResizerItems = ParsedResizerItem[];\n\nexport function resizerItemAttributes<T>(type: ItemType) {\n  return (config: T) => ({\n    'data-item-type': type,\n    'data-item-config': JSON.stringify(config),\n  });\n}\n\nexport function parseResizerItems(container: HTMLElement): ParsedResizerItems {\n  return Array.from(container.childNodes)\n    .map((elm) => {\n      if (!(elm instanceof HTMLElement)) return null;\n\n      const type = elm.getAttribute('data-item-type');\n\n      if (isValidType(type)) {\n        return { type, elm };\n      } else {\n        return null;\n      }\n    })\n    .filter(<T>(item: T): item is Exclude<T, null> => !!item);\n}\n\nexport function parseItemConfig({ elm }: { elm: HTMLElement }): Record<string, unknown> {\n  try {\n    const config = JSON.parse(elm.getAttribute('data-item-config') ?? '');\n    return config && typeof config === 'object' ? config : {};\n  } catch {\n    return {};\n  }\n}\n","import { SizeRelatedInfo } from './types';\nimport { getNextSizeRelatedInfo, BarActionScanResult } from './utils';\n\ntype ResizeResult = SizeRelatedInfo | BarActionScanResult;\n\nfunction getBarIndex(indexOfBar: number): number {\n  return indexOfBar * 2 + 1;\n}\n\nfunction getSectionIndex(indexOfSection: number): number {\n  return indexOfSection * 2;\n}\n\nexport class Resizer {\n  private isDiscarded = false;\n\n  constructor(private resizeResult: ResizeResult) {}\n\n  resizeSection(indexOfSection: number, config: { toSize: number; preferMoveLeftBar?: boolean }) {\n    if (this.isDiscarded) {\n      return;\n    }\n\n    const sectionID = getSectionIndex(indexOfSection);\n    const currentSize = this.getSize(sectionID);\n\n    if (currentSize >= 0 && config.toSize >= 0) {\n      const offset = config.toSize - currentSize;\n\n      if (sectionID === this.resizeResult.sizeInfoArray.length - 1 || config.preferMoveLeftBar) {\n        this.moveBar(indexOfSection - 1, { withOffset: -offset });\n      } else {\n        this.moveBar(indexOfSection, { withOffset: offset });\n      }\n    }\n  }\n\n  moveBar(indexOfBar: number, config: { withOffset: number }) {\n    if (this.isDiscarded) {\n      return;\n    }\n\n    this.resizeResult = getNextSizeRelatedInfo(\n      getBarIndex(indexOfBar),\n      config.withOffset,\n      this.resizeResult.sizeInfoArray,\n    );\n  }\n\n  discard() {\n    this.isDiscarded = true;\n  }\n\n  isSectionResized(indexOfSection: number): boolean {\n    const sectionID = getSectionIndex(indexOfSection);\n\n    if ('defaultSizeInfoArray' in this.resizeResult) {\n      return (\n        this.getSize(sectionID) !== this.resizeResult.defaultSizeInfoArray[sectionID].currentSize\n      );\n    } else {\n      return false;\n    }\n  }\n\n  isBarActivated(indexOfBar: number): boolean {\n    if ('barIndex' in this.resizeResult) {\n      return this.resizeResult.barIndex === getBarIndex(indexOfBar);\n    } else {\n      return false;\n    }\n  }\n\n  getSectionSize(indexOfSection: number) {\n    return this.getSize(getSectionIndex(indexOfSection));\n  }\n\n  getResult(): SizeRelatedInfo {\n    return { ...this.resizeResult, discard: this.isDiscarded };\n  }\n\n  getTotalSize(): number {\n    return this.resizeResult.sizeInfoArray\n      .filter((sizeInfo, index) => sizeInfo && index % 2 === 0)\n      .reduce((total, { currentSize }) => total + currentSize, 0);\n  }\n\n  private getSize(index: number): number | -1 {\n    const sizeInfo = this.resizeResult.sizeInfoArray[index];\n    return sizeInfo ? sizeInfo.currentSize : -1;\n  }\n}\n","import { ItemType } from '../types';\n\nexport abstract class ColumnInstance<Config = unknown> {\n  private _config: Config;\n  private _observer: MutationObserver;\n\n  get config(): Config {\n    return this._config;\n  }\n\n  protected constructor(\n    public readonly type: ItemType,\n    public readonly elm: HTMLElement,\n    private readonly getConfig: () => Config,\n  ) {\n    this._config = this.getConfig();\n    this._observer = new MutationObserver(() => (this._config = this.getConfig()));\n    this._observer.observe(elm, { attributes: true, attributeFilter: ['data-item-config'] });\n  }\n\n  destroy() {\n    this._observer.disconnect();\n  }\n}\n","import { BarAction, BarActionType, Coordinate, ItemType } from '../types';\nimport {\n  DISABLE_PASSIVE,\n  dispatchResizerEvent,\n  isValidNumber,\n  parseItemConfig,\n  ParsedResizerItem,\n} from '../utils';\n\nimport { ColumnInstance } from './column-instance';\n\nexport type DispatchBarAction = (elm: HTMLElement, action: Omit<BarAction, 'barIndex'>) => void;\n\nexport type ColumnBarConfig = {\n  size: number;\n};\n\ntype ValidElmEventKey = {\n  [K in keyof HTMLElementEventMap]: K extends `${'touch' | 'mouse'}${string}` ? K : never;\n}[keyof HTMLElementEventMap];\n\ntype ValidElm = {\n  addEventListener<K extends ValidElmEventKey>(\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends ValidElmEventKey>(\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n};\n\nexport class ColumnBar extends ColumnInstance<ColumnBarConfig> {\n  static getStyle({ size }: ColumnBarConfig) {\n    return {\n      flex: `0 0 ${size}px`,\n    };\n  }\n\n  private isActive = false;\n  private isValidClick = true;\n\n  constructor(\n    item: ParsedResizerItem,\n    private readonly dispatchBarAction: DispatchBarAction,\n  ) {\n    super(ItemType.BAR, item.elm, () => getConfig(item));\n\n    const disposeList = [\n      this.attachListener(this.elm, 'mousedown', BarActionType.ACTIVATE),\n      this.attachListener(document, 'mousemove', BarActionType.MOVE),\n      this.attachListener(document, 'mouseup', BarActionType.DEACTIVATE),\n\n      this.attachListener(this.elm, 'touchstart', BarActionType.ACTIVATE, DISABLE_PASSIVE),\n      this.attachListener(document, 'touchmove', BarActionType.MOVE, DISABLE_PASSIVE),\n      this.attachListener(document, 'touchend', BarActionType.DEACTIVATE),\n      this.attachListener(document, 'touchcancel', BarActionType.DEACTIVATE),\n    ];\n\n    this.destroy = () => {\n      super.destroy();\n      disposeList.forEach((dispose) => dispose());\n    };\n  }\n\n  private attachListener<K extends ValidElmEventKey>(\n    elm: ValidElm,\n    event: K,\n    type: BarActionType,\n    options?: boolean | AddEventListenerOptions,\n  ) {\n    const handler = (event: MouseEvent | TouchEvent) => {\n      this.disableUserSelectIfResizing(event, type);\n      const { clientX: x, clientY: y } = ('touches' in event ? event.touches[0] : event) || {\n        clientX: 0,\n        clientY: 0,\n      };\n      this.triggerAction(this.elm, type, { x, y });\n    };\n\n    elm.addEventListener(event, handler, options);\n\n    return () => elm.removeEventListener(event, handler, options);\n  }\n\n  private disableUserSelectIfResizing(event: MouseEvent | TouchEvent, type: BarActionType) {\n    if (this.isActive || type === BarActionType.ACTIVATE) {\n      event.preventDefault();\n    }\n  }\n\n  private triggerAction(elm: HTMLElement, type: BarActionType, coordinate: Coordinate) {\n    if (this.isActive || type === BarActionType.ACTIVATE) {\n      this.dispatchBarAction(elm, { type, coordinate });\n    }\n\n    if (this.isActive && this.isValidClick && type === BarActionType.DEACTIVATE) {\n      this.isValidClick = false; // avoid trigger twice on mobile.\n      // touch and click\n      dispatchResizerEvent(elm, 'bar:click', null);\n    }\n\n    this.updateStatusIfNeed(elm, type);\n    this.updateClickStatus(type);\n  }\n\n  private updateStatusIfNeed(elm: HTMLElement, type: BarActionType) {\n    const onStatusChanged = (isActive: boolean) => {\n      if (this.isActive !== isActive) {\n        this.isActive = isActive;\n        dispatchResizerEvent(elm, 'bar:status-change', { isActive });\n      }\n    };\n\n    if (type === BarActionType.ACTIVATE) {\n      onStatusChanged(true);\n    } else if (type === BarActionType.DEACTIVATE) {\n      onStatusChanged(false);\n    }\n  }\n\n  private updateClickStatus(type: BarActionType) {\n    if (this.isActive) {\n      if (type === BarActionType.ACTIVATE) {\n        this.isValidClick = true;\n      } else if (type === BarActionType.MOVE) {\n        this.isValidClick = false;\n      }\n    }\n  }\n}\n\nfunction getConfig(item: Pick<ParsedResizerItem, 'elm'>): ColumnBarConfig {\n  const { size } = parseItemConfig(item);\n\n  return {\n    size: isValidNumber(size) ? size : 10,\n  };\n}\n","import { SizeInfo, ItemType } from '../types';\nimport { isValidNumber, dispatchResizerEvent, parseItemConfig, ParsedResizerItem } from '../utils';\n\nimport { ColumnInstance } from './column-instance';\n\nexport type ColumnSectionConfig = {\n  size?: number;\n  defaultSize?: number;\n  maxSize?: number;\n  minSize?: number;\n  disableResponsive?: boolean;\n};\n\nexport class ColumnSection extends ColumnInstance<ColumnSectionConfig> {\n  static getStyle({ maxSize, minSize }: ColumnSectionConfig, vertical: boolean) {\n    const toCSSSize = (size?: number) => (isValidNumber(size) ? `${size}px` : undefined);\n\n    return {\n      overflow: 'hidden',\n      [vertical ? 'maxHeight' : 'maxWidth']: toCSSSize(maxSize),\n      [vertical ? 'minHeight' : 'minWidth']: toCSSSize(minSize),\n    };\n  }\n\n  private sizeInfo: SizeInfo | null = null;\n  private flexGrowRatio = 0;\n\n  constructor(item: ParsedResizerItem) {\n    super(ItemType.SECTION, item.elm, () => getConfig(item));\n\n    this.updateStyle();\n  }\n\n  update({ sizeInfo, flexGrowRatio }: { sizeInfo: SizeInfo; flexGrowRatio: number }) {\n    this.sizeInfo = sizeInfo;\n    this.flexGrowRatio = flexGrowRatio;\n\n    this.updateStyle();\n    dispatchResizerEvent(this.elm, 'section:size-change', { size: sizeInfo.currentSize });\n  }\n\n  private updateStyle() {\n    const { flexGrow, flexShrink, flexBasis } = this.getStyle();\n    this.elm.style.flexGrow = `${flexGrow}`;\n    this.elm.style.flexShrink = `${flexShrink}`;\n    this.elm.style.flexBasis = `${flexBasis}px`;\n  }\n\n  private getStyle() {\n    const flexShrink = isValidNumber(this.config.size) ? 0 : this.config.disableResponsive ? 1 : 0;\n\n    if (this.sizeInfo) {\n      const { disableResponsive, currentSize } = this.sizeInfo;\n\n      return {\n        flexShrink,\n        flexGrow: disableResponsive ? 0 : this.flexGrowRatio * currentSize,\n        flexBasis: disableResponsive ? currentSize : 0,\n      };\n    } else {\n      const size = this.config.size || this.config.defaultSize;\n\n      if (isValidNumber(size)) {\n        return { flexShrink, flexGrow: 0, flexBasis: size };\n      } else {\n        return { flexShrink, flexGrow: 1, flexBasis: 0 };\n      }\n    }\n  }\n}\n\nfunction getConfig(item: Pick<ParsedResizerItem, 'elm'>): ColumnSectionConfig {\n  const { size, defaultSize, maxSize, minSize, disableResponsive } = parseItemConfig(item);\n\n  return {\n    size: isValidNumber(size) ? size : undefined,\n    defaultSize: isValidNumber(defaultSize) ? defaultSize : undefined,\n    maxSize: isValidNumber(maxSize) ? maxSize : undefined,\n    minSize: isValidNumber(minSize) ? minSize : undefined,\n    disableResponsive: !!disableResponsive,\n  };\n}\n","import { BarActionType, ItemType, SizeRelatedInfo } from './types';\nimport { Resizer } from './resizer';\nimport {\n  ColumnBar,\n  ColumnBarConfig,\n  ColumnSection,\n  ColumnSectionConfig,\n  DispatchBarAction,\n} from './column-items';\nimport {\n  BarActionScanResult,\n  calculateCoordinateOffset,\n  collectSizeRelatedInfo,\n  ColumnItemsCache,\n  createBarStore,\n  dispatchResizerEvent,\n  isDisabledResponsive,\n  isSolidItem,\n  parseResizerItems,\n  resizerItemAttributes,\n  ResizerItems,\n  ResizerEventHub,\n} from './utils';\n\nexport type { ColumnSectionConfig, ColumnBarConfig };\n\nexport type ColumnResizerConfig = {\n  vertical: boolean;\n  beforeApplyResizer?: (resizer: Resizer) => void;\n};\n\nexport class ColumnResizer {\n  styles = {\n    container: <T>(style?: T) =>\n      ({\n        ...style,\n        display: 'flex',\n        flexDirection: this.direction,\n      }) as const,\n\n    section: <T>(config: ColumnSectionConfig, style?: T) => ({\n      ...style,\n      ...ColumnSection.getStyle(config, this.config.vertical),\n    }),\n\n    bar: <T>(config: ColumnBarConfig, style?: T) => ({\n      ...style,\n      ...ColumnBar.getStyle(config),\n    }),\n  };\n\n  attributes = {\n    bar: resizerItemAttributes(ItemType.BAR),\n    section: resizerItemAttributes(ItemType.SECTION),\n  };\n\n  private itemsCache = new ColumnItemsCache();\n  private eventHub = new ResizerEventHub();\n\n  private container: HTMLElement | null = null;\n\n  private barStore: ReturnType<typeof createBarStore>;\n\n  private get axis() {\n    return this.config.vertical ? 'y' : 'x';\n  }\n\n  private get dimension() {\n    return this.config.vertical ? 'height' : 'width';\n  }\n\n  private get direction() {\n    return this.config.vertical ? 'column' : 'row';\n  }\n\n  get on() {\n    return this.eventHub.watchResizerEvent;\n  }\n\n  constructor(public readonly config: Readonly<ColumnResizerConfig>) {\n    this.barStore = createBarStore({\n      calculateOffset: (current, original) =>\n        calculateCoordinateOffset(current, original)[this.axis],\n      getSizeRelatedInfo: () => this.makeSizeInfos(),\n    });\n  }\n\n  init(container: HTMLElement | null) {\n    this.dispose();\n    this.container = container;\n\n    if (container) {\n      this.itemsCache.update(\n        parseResizerItems(container).map((item) => {\n          switch (item.type) {\n            case ItemType.BAR:\n              return new ColumnBar(item, this.dispatchBarAction);\n            case ItemType.SECTION:\n              return new ColumnSection(item);\n          }\n        }),\n      );\n\n      this.initStyles(container, this.itemsCache.getItems());\n      this.sizeRelatedInfoChange(this.makeSizeInfos());\n\n      this.barStore.subscribe((state) => {\n        this.monitorBarStatusChanges(state);\n        this.sizeRelatedInfoChange(state);\n      });\n    }\n  }\n\n  dispose() {\n    this.container = null;\n    this.itemsCache.reset();\n    this.barStore.unsubscribeAll();\n    this.eventHub.reset();\n  }\n\n  getResizer(): Resizer {\n    return new Resizer(this.makeSizeInfos());\n  }\n\n  applyResizer(resizer: Resizer): void {\n    this.sizeRelatedInfoChange(resizer.getResult());\n  }\n\n  private dispatchBarAction: DispatchBarAction = (elm, action) => {\n    const barIndex = this.itemsCache.getItemIndex(elm);\n\n    if (barIndex) {\n      this.barStore.dispatch({ ...action, barIndex });\n    }\n  };\n\n  private sizeRelatedInfoChange(info: SizeRelatedInfo | BarActionScanResult) {\n    if (info.discard) return;\n\n    info = (() => {\n      if (typeof this.config.beforeApplyResizer === 'function') {\n        const resizer = new Resizer(info);\n        this.config.beforeApplyResizer(resizer);\n        return resizer.getResult();\n      } else {\n        return info;\n      }\n    })();\n\n    if (info.discard) return;\n\n    info.sizeInfoArray.forEach((sizeInfo) => {\n      const item = this.itemsCache.getItem(sizeInfo.elm);\n\n      if (item instanceof ColumnSection) {\n        item.update({ sizeInfo, flexGrowRatio: info.flexGrowRatio });\n      }\n    });\n  }\n\n  private monitorBarStatusChanges({ type }: BarActionScanResult) {\n    switch (type) {\n      case BarActionType.ACTIVATE:\n        return dispatchResizerEvent(this.container, 'column:activate', null);\n      case BarActionType.DEACTIVATE:\n        return dispatchResizerEvent(this.container, 'column:after-resizing', null);\n      default:\n        return;\n    }\n  }\n\n  private makeSizeInfos(): SizeRelatedInfo {\n    const { collect, getResult } = collectSizeRelatedInfo();\n\n    this.itemsCache.getItems().forEach((item) => {\n      if (item instanceof ColumnBar) {\n        collect({\n          elm: item.elm,\n          disableResponsive: true,\n          isSolid: true,\n          currentSize: item.elm.getBoundingClientRect()[this.dimension],\n        });\n      }\n\n      if (item instanceof ColumnSection) {\n        collect({\n          elm: item.elm,\n          maxSize: item.config.maxSize,\n          minSize: item.config.minSize,\n          disableResponsive: isDisabledResponsive(item.config),\n          isSolid: isSolidItem(item.config),\n          currentSize: item.elm.getBoundingClientRect()[this.dimension],\n        });\n      }\n    });\n\n    return getResult();\n  }\n\n  private initStyles(container: HTMLElement, items: ResizerItems) {\n    Object.assign(container.style, this.styles.container());\n\n    items.forEach((item) => {\n      if (item instanceof ColumnBar) {\n        Object.assign(item.elm.style, this.styles.bar(item.config));\n      }\n\n      if (item instanceof ColumnSection) {\n        Object.assign(item.elm.style, this.styles.section(item.config));\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}